#!/hive/groups/recon/local/bin/python
'''
filters scaffolds that contain only single block
and marks not to count it henceforward
'''

import argparse
import itertools
from collections import Counter

#noise is when single scaffold corresponds to single syntenic block
def filter_noise(chrs):
    noise_keys = filter(lambda x: len(chrs[x]) == 1, chrs)
    noise = []
    for key in noise_keys:
        noise += chrs[key]
    noise = set(map(abs,noise))
    #filter iteratively:
    #if scaffold = 1 2 3 4 , and 1, 2, 3 is noise, than 4 is noise
    while True:
        updated = False
        for key in chrs.keys():
            scaffolds = chrs[key]
            noise_cnt = 0
            for s in scaffolds:
                if abs(s) in noise:
                    noise_cnt += 1
            if noise_cnt == len(scaffolds) - 1:
                noise.update(map(abs,scaffolds))
                updated = True
        if not updated:
            break
    not_noise = {}
    for key in chrs.keys():
         res = [item for item in chrs[key] if not (abs(item) in noise)]
         if res:
            not_noise[key] = res
    return not_noise


def filter_from_dups(chrs):
    names = map(lambda x: x.split('.')[0], chrs.keys())
    names = set(names)
    chrs_upd = {}
    for name in names:
       chrs_name = {}
       for c in chrs.keys():
           if name in c:
               chrs_name[c] = chrs[c]
       dups = Counter(map(abs,itertools.chain(*chrs_name.values())))
       dups = filter(lambda x: dups[x]>1, dups)
       for c in chrs_name.keys():
            chrs_upd[c] = filter(lambda x: not abs(x) in dups, chrs_name[c])
    return chrs_upd
            
def print_out_grimm_format(chrs):
    names = chrs.keys()
    names = map(lambda x: x.split('.')[0], names)
    names = set(names)
    size = 0
    for name in names:
        print '\n>'+name
        for e in chrs:
            if name == e.split('.')[0]:
                #print ' '.join(map(str,chrs[e])) 
                print ' '.join(map(str,chrs[e])) + ' $'

def parse_chromosomes_ragout(file):
    chrs = {}
    chr_name = ''
    with open(file) as f:
        for line in f:
            line = line.strip()
            if line[0] == '>':
                chr_name = line[1:]
            else:
                line = line.split()
                chrs[chr_name] = map(int, line[:-1])
    return chrs

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('file', help='genomes_permutations.txt')
    args = parser.parse_args()
    chrs = filter_from_dups(parse_chromosomes_ragout(args.file))
    not_noise = filter_noise(chrs)
    print_out_grimm_format(not_noise)
